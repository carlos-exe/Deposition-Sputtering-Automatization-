from PyQt6.QtWidgets import (
    QApplication,
    QMainWindow,
    QComboBox,
    QListWidget,
    QLabel,
    QLineEdit,
    QRadioButton,
    QCheckBox,
    QPushButton,
    QMessageBox,
)
from PyQt6.QtCore import Qt, QTimer
from PyQt6.QtGui import  QFont
import serial.tools.list_ports
import serial.serialutil
from pylx16a.lx16a import *
import platform
import sys
import time


def catch_disconnection(func):
    def wrapper(self, *args, **kwargs):
        try:
            return func(self, *args, **kwargs)
        except Exception as e:
            if isinstance(e, serial.serialutil.SerialException):
                self.disable_widgets()
                self.clear_servo()
                self.port_refresh_button_clicked(None)
                QMessageBox.critical(None, "Error", "Disconnected from device")
            else:
                QMessageBox.information(None, "Error", str(e))

    return wrapper


class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setFixedSize(835, 480)

        # Title

        self.setWindowTitle(f"Sputtering Automation v1.0 ({platform.system()})")

        
        # Ports Bar

        self.port_selection_box = QComboBox(self)
        self.port_selection_box.setFixedSize(200, 27)
        self.port_selection_box.move(30, 65)

        # Select Port Text

        port_selection_box_label = QLabel("Select Port:", self)
        port_selection_box_label.move(30, 35)

        # Refresh button

        self.port_selection_box_refresh_button = QPushButton("Refresh", self)
        self.port_selection_box_refresh_button.setFixedSize(60, 23)
        self.port_selection_box_refresh_button.move(170, 38)

        # Servos Connected Section

        self.id_selection_box = QListWidget(self)
        self.id_selection_box.setFixedSize(200, 200)
        self.id_selection_box.move(30, 135)

        # Connected Servos text

        id_selection_box_label = QLabel("Connected Servos:", self)
        id_selection_box_label.setFixedWidth(200)
        id_selection_box_label.move(30, 105)

        # Refresh Button

        self.id_selection_box_refresh_button = QPushButton("Refresh", self)
        self.id_selection_box_refresh_button.setFixedSize(60, 23)
        self.id_selection_box_refresh_button.move(170, 108)

        # Set ID Edit

        self.set_id_line_edit = QLineEdit(self)
        self.set_id_line_edit.setFixedSize(50, 27)
        self.set_id_line_edit.move(80, 355)

        # Set ID text

        set_id_line_edit_label = QLabel("Set ID:", self)
        set_id_line_edit_label.move(30, 355)
        set_id_line_edit_label.setFixedSize(50, 27)

        # Change ID button

        self.set_id_button = QPushButton("Change ID!", self)
        self.set_id_button.setFixedSize(85, 27)
        self.set_id_button.move(145, 355)

        # Motor Status

        ## Motor Status title

        self.Motor_Status_label = QLabel("MOTOR STATUS", self)
        self.Motor_Status_label.move(80, 390)
        font = QFont('Arial',10,QFont.Weight.Bold)
        self.Motor_Status_label.setFont(font)
        self.Motor_Status_label.setFixedSize(110,27)

        ## Position Status

        ### Position readout value

        self.physical_position_readout = QLabel("--°", self)
        self.physical_position_readout.move(45, 430) 
        self.physical_position_readout.setFixedWidth(200)

        ### Position readout text

        self.physical_position_readout_label = QLabel("Position", self)
        self.physical_position_readout_label.move(30, 410)

        ## Temperature Status

        ### Temperature readout value

        self.temperature_readout = QLabel("-- °C", self)
        self.temperature_readout.move(125,430)
        self.temperature_readout.setFixedWidth(200)

        ### Temperature readout text

        self.temperature_readout_label = QLabel("Temperature", self)
        self.temperature_readout_label.move(100, 410)

        ## Voltage Status

        ### Voltage read out value

        self.voltage_readout = QLabel("-- V", self)
        self.voltage_readout.move(200, 430)
        self.voltage_readout.setFixedWidth(200)

        ### Voltage read out text

        self.voltage_readout_label = QLabel("Voltage", self)
        self.voltage_readout_label.move(190, 410)

        # Servo Mode Option

        self.servo_mode_radio_button = QRadioButton("Servo Mode", self)
        self.servo_mode_radio_button.move(300, 30)

        # Servo Motor Option

        self.motor_mode_radio_button = QRadioButton("Motor Mode", self)
        self.motor_mode_radio_button.move(400, 30)

        # Use Camera Checkbox

        self.use_camera_checkbox = QCheckBox("Use Camera",self)
        self.use_camera_checkbox.move(500, 30)

        # Falta

        ## Use Not Camera time

        ### Not Use Camera Time Text
        
        set_not_camera_time_edit_label = QLabel("Set Time:", self)
        set_not_camera_time_edit_label.move(595, 30)
        set_not_camera_time_edit_label.setFixedSize(70, 27)

        ### Not Use Camera Time Edit

        self.set_not_camera_time_edit = QLineEdit(self)
        self.set_not_camera_time_edit.setFixedSize(50, 27)
        self.set_not_camera_time_edit.move(650, 30)

        ### Not Use Camera Time Button

        # Falta

        self.not_camera_time_button = QPushButton("Set", self)
        self.not_camera_time_button.move(700, 30)
        self.not_camera_time_button.setFixedSize(30, 27)

        # Falta

        # Set Manual Angle

        ## Set Manual Angle Text
        
        set_angle_line_edit_label = QLabel("Set Angle:", self)
        set_angle_line_edit_label.move(280, 100)
        set_angle_line_edit_label.setFixedSize(70, 27)

        ## Set Manual Angle Edit

        self.set_angle_line_edit = QLineEdit(self)
        self.set_angle_line_edit.setFixedSize(50, 27)
        self.set_angle_line_edit.move(340, 100)

        ## Set Manual Angle Button

        self.set_angle_button = QPushButton("Set", self)
        self.set_angle_button.move(390, 100)
        self.set_angle_button.setFixedSize(30, 27)

        # Set Manual Speed

        ## Set Manual Speed text
        
        set_speed_line_edit_label = QLabel("Set SPEED:", self)
        set_speed_line_edit_label.move(430, 100)
        set_speed_line_edit_label.setFixedSize(70, 27)

        ## Set Manual Speed edit

        self.set_speed_line_edit = QLineEdit(self)
        self.set_speed_line_edit.setFixedSize(50, 27)
        self.set_speed_line_edit.move(490, 100)

        ## Set Manual Speed button

        self.set_speed_button = QPushButton("Set", self)
        self.set_speed_button.move(540, 100)
        self.set_speed_button.setFixedSize(30, 27)

        # Set Manual Temperature

        ## Set Manual Temperature text
        
        set_Temperature_line_edit_label = QLabel("Set Temperature:", self)
        set_Temperature_line_edit_label.move(580, 100)
        set_Temperature_line_edit_label.setFixedSize(90, 27)

        ## Set Manual Temperature edit

        self.set_Temperature_line_edit = QLineEdit(self)
        self.set_Temperature_line_edit.setFixedSize(50, 27)
        self.set_Temperature_line_edit.move(675, 100)

        ## Set Manual Temperature button

        self.set_Temperature_button = QPushButton("Set", self)
        self.set_Temperature_button.move(725, 100)
        self.set_Temperature_button.setFixedSize(30, 27)

        # STAGES title

        self.stages_title = QLabel("STAGES", self)
        self.stages_title.setFont(font)
        self.stages_title.move(500, 145)
        self.stages_title.setFixedSize(60, 27)
        self.stages_title.setAlignment(
            Qt.AlignmentFlag.AlignVCenter
        )

        ## SPEED STAGES title

        self.stages_title = QLabel("SPEED STAGES", self)
        self.stages_title.move(340, 175)
        self.stages_title.setFixedSize(80, 27)
        self.stages_title.setAlignment(
            Qt.AlignmentFlag.AlignVCenter
        )

        ## Stage 1 title

        self.stage_1 = QLabel(f"Stage 1:", self)
        self.stage_1.move(265, 195)
        self.stage_1.setFixedSize(50, 27)   

        ### Stage 1 Speed text

        set_speed_1_line_edit_label = QLabel("Speed:", self)
        set_speed_1_line_edit_label.move(275, 220)
        set_speed_1_line_edit_label.setFixedSize(70, 27)
        
        ### Stage 1 Speed Edit

        self.set_speed_1_line_edit = QLineEdit(self)
        self.set_speed_1_line_edit.setFixedSize(40, 25)
        self.set_speed_1_line_edit.move(315, 220) 

        ### Stage 1 Time text  

        set_time_1_line_edit_label = QLabel("Time:", self)
        set_time_1_line_edit_label.move(360, 220)
        set_time_1_line_edit_label.setFixedSize(70, 27)

        ### Stage 1 Time Edit

        self.set_time_1_line_edit = QLineEdit(self)
        self.set_time_1_line_edit.setFixedSize(40, 25)
        self.set_time_1_line_edit.move(390, 220)  

        ### Stage 1 Lineal Checkbox

        self.stage_1_checkbox = QCheckBox("Lineal", self)
        self.stage_1_checkbox.move(435, 217)
        self.stage_1_checkbox.setFixedWidth(200)

        ## Stage 2 title

        self.stage_2 = QLabel(f"Stage 2:", self)
        self.stage_2.move(265, 245)
        self.stage_2.setFixedSize(50, 27)

        ### Stage 2 Speed text

        set_speed_2_line_edit_label = QLabel("Speed:", self)
        set_speed_2_line_edit_label.move(275, 270)
        set_speed_2_line_edit_label.setFixedSize(70, 27)

        ### Stage 2 Speed Edit

        self.set_speed_2_line_edit = QLineEdit(self)
        self.set_speed_2_line_edit.setFixedSize(40, 25)
        self.set_speed_2_line_edit.move(315, 270)   

        ### Stage 2 Time text

        set_time_2_line_edit_label = QLabel("Time:", self)
        set_time_2_line_edit_label.move(360, 270)
        set_time_2_line_edit_label.setFixedSize(70, 27)

        ### Stage 2 Time Edit

        self.set_time_2_line_edit = QLineEdit(self)
        self.set_time_2_line_edit.setFixedSize(40, 25)
        self.set_time_2_line_edit.move(390, 270)  

        ### Stage 2 Lineal Checkbox

        self.stage_2_checkbox = QCheckBox("Lineal", self)
        self.stage_2_checkbox.move(435, 267)
        self.stage_2_checkbox.setFixedWidth(200)

        ## Stage 3 title

        self.stage_3 = QLabel(f"Stage 3:", self)
        self.stage_3.move(265, 295)
        self.stage_3.setFixedSize(50, 27)

        ### Stage 3 Speed text

        set_speed_3_line_edit_label = QLabel("Speed:", self)
        set_speed_3_line_edit_label.move(275, 320)
        set_speed_3_line_edit_label.setFixedSize(70, 27)

        ### Stage 3 Speed Edit

        self.set_speed_3_line_edit = QLineEdit(self)
        self.set_speed_3_line_edit.setFixedSize(40, 25)
        self.set_speed_3_line_edit.move(315, 320)   

        ### Stage 3 Time text

        set_time_3_line_edit_label = QLabel("Time:", self)
        set_time_3_line_edit_label.move(360, 320)#45
        set_time_3_line_edit_label.setFixedSize(70, 27)

        ### Stage 3 Time Edit

        self.set_time_3_line_edit = QLineEdit(self)
        self.set_time_3_line_edit.setFixedSize(40, 25)
        self.set_time_3_line_edit.move(390, 320) #30

        ### Stage 3 Lineal Check box

        self.stage_3_checkbox = QCheckBox("Lineal", self)
        self.stage_3_checkbox.move(435, 317)#45
        self.stage_3_checkbox.setFixedWidth(200)

        ## ANGLE STAGES title

        self.angle_stages_title = QLabel("ANGLE STAGES", self)
        self.angle_stages_title.move(640, 175)
        self.angle_stages_title.setFixedSize(80, 27)
        self.angle_stages_title.setAlignment(
            Qt.AlignmentFlag.AlignVCenter
        )

        ## Stage 1 title

        self.angle_stage_1 = QLabel(f"Stage 1:", self)
        self.angle_stage_1.move(565, 195)
        self.angle_stage_1.setFixedSize(50, 27)   

        ### Stage 1 Angle text

        set_angle_speed_1_line_edit_label = QLabel("Angle:", self)
        set_angle_speed_1_line_edit_label.move(575, 220)
        set_angle_speed_1_line_edit_label.setFixedSize(70, 27)
        
        ### Stage 1 Angle Edit

        self.set_angle_value_1_line_edit = QLineEdit(self)
        self.set_angle_value_1_line_edit.setFixedSize(40, 25)
        self.set_angle_value_1_line_edit.move(615, 220) 

        ### Stage 1 Time text  

        set_angle_time_1_line_edit_label = QLabel("Time:", self)
        set_angle_time_1_line_edit_label.move(660, 220)
        set_angle_time_1_line_edit_label.setFixedSize(70, 27)

        ### Stage 1 Time Edit

        self.set_angle_time_1_line_edit = QLineEdit(self)
        self.set_angle_time_1_line_edit.setFixedSize(40, 25)
        self.set_angle_time_1_line_edit.move(690, 220)  

        ### Stage 1 Lineal Checkbox

        self.angle_stage_1_checkbox = QCheckBox("Lineal", self)
        self.angle_stage_1_checkbox.move(735, 217)
        self.angle_stage_1_checkbox.setFixedWidth(200)

        ## Stage 2 title

        self.angle_stage_2 = QLabel(f"Stage 2:", self)
        self.angle_stage_2.move(565, 245)
        self.angle_stage_2.setFixedSize(50, 27)

        ### Stage 2 Speed text

        set_angle_speed_2_line_edit_label = QLabel("Speed:", self)
        set_angle_speed_2_line_edit_label.move(575, 270)
        set_angle_speed_2_line_edit_label.setFixedSize(70, 27)

        ### Stage 2 Speed Edit

        self.set_angle_value_2_line_edit = QLineEdit(self)
        self.set_angle_value_2_line_edit.setFixedSize(40, 25)
        self.set_angle_value_2_line_edit.move(615, 270)   

        ### Stage 2 Time text

        set_angle_time_2_line_edit_label = QLabel("Time:", self)
        set_angle_time_2_line_edit_label.move(660, 270)
        set_angle_time_2_line_edit_label.setFixedSize(70, 27)

        ### Stage 2 Time Edit

        self.set_angle_time_2_line_edit = QLineEdit(self)
        self.set_angle_time_2_line_edit.setFixedSize(40, 25)
        self.set_angle_time_2_line_edit.move(690, 270)

        ### Stage 2 Lineal Checkbox

        self.angle_stage_2_checkbox = QCheckBox("Lineal", self)
        self.angle_stage_2_checkbox.move(735, 267)
        self.angle_stage_2_checkbox.setFixedWidth(200)

        ## Stage 3 title

        self.angle_stage_3 = QLabel(f"Stage 3:", self)
        self.angle_stage_3.move(565, 295)
        self.angle_stage_3.setFixedSize(50, 27)

        ### Stage 3 Speed text

        set_angle_speed_3_line_edit_label = QLabel("Speed:", self)
        set_angle_speed_3_line_edit_label.move(575, 320)
        set_angle_speed_3_line_edit_label.setFixedSize(70, 27)

        ### Stage 3 Speed Edit

        self.set_angle_value_3_line_edit = QLineEdit(self)
        self.set_angle_value_3_line_edit.setFixedSize(40, 25)
        self.set_angle_value_3_line_edit.move(615, 320)   

        ### Stage 3 Time text

        set_angle_time_3_line_edit_label = QLabel("Time:", self)
        set_angle_time_3_line_edit_label.move(660, 320)
        set_angle_time_3_line_edit_label.setFixedSize(70, 27)

        ### Stage 3 Time Edit

        self.set_angle_time_3_line_edit = QLineEdit(self)
        self.set_angle_time_3_line_edit.setFixedSize(40, 25)
        self.set_angle_time_3_line_edit.move(690, 320)

        ### Stage 3 Lineal Check box

        self.angle_stage_3_checkbox = QCheckBox("Lineal", self)
        self.angle_stage_3_checkbox.move(735, 317)
        self.angle_stage_3_checkbox.setFixedWidth(200)

        ## Stages Action button

        self.begin_stages_button = QPushButton("Let's Go", self)
        self.begin_stages_button.move(500, 400)
        self.begin_stages_button.setFixedSize(50, 27)

        # Initialize the program
        
        self.readout_update_timer = QTimer(self)
        self.readout_update_timer.timeout.connect(self.update_readouts)
        self.readout_update_timer.start(250)

        self.timer = QTimer(self)
        self.timer.timeout.connect(self.update_temp)

        # Initialize the servo

        self.active_servo: LX16A = None

        # Initialize the default values

        self.set_speed_line_edit.setText("0")
        self.set_speed_1_line_edit.setText("0")
        self.set_speed_2_line_edit.setText("0")
        self.set_speed_3_line_edit.setText("0")
        self.set_time_1_line_edit.setText("0")
        self.set_time_2_line_edit.setText("0")
        self.set_time_3_line_edit.setText("0")
        self.set_angle_line_edit.setText("0°")
        self.set_angle_value_1_line_edit.setText("0")
        self.set_angle_value_2_line_edit.setText("0")
        self.set_angle_value_3_line_edit.setText("0")
        self.set_angle_time_1_line_edit.setText("0")
        self.set_angle_time_2_line_edit.setText("0")
        self.set_angle_time_3_line_edit.setText("0")
        self.set_Temperature_line_edit.setText("0")
        self.id_selection_box_refresh_button.setEnabled(False)
        self.disable_widgets()

        self.port_selection_box.currentTextChanged.connect(
            self.port_selection_box_changed
        )
        self.port_selection_box_refresh_button.clicked.connect(
            self.port_refresh_button_clicked
        )
        self.id_selection_box.currentTextChanged.connect(self.id_selection_box_changed)
        self.id_selection_box_refresh_button.clicked.connect(
            self.id_refresh_button_clicked
        )
        # Motor Button
        self.set_speed_button.pressed.connect(self.motor_speed_button_updated)

        self.set_Temperature_button.pressed.connect(self.verify_Temperature)

        # Stages Button
        self.begin_stages_button.pressed.connect(self.stagesRun)
        self.begin_stages_button.pressed.connect(self.stagesRunAngle)
    
        self.set_id_button.pressed.connect(self.id_updated)

        self.set_angle_button.pressed.connect(self.position_button_updated)

        self.servo_mode_radio_button.toggled.connect(
            self.servo_mode_radio_button_toggled
        )

        self.motor_mode_radio_button.toggled.connect(
            self.motor_mode_radio_button_toggled
        )

        self.scan_for_ports()

    def disable_widgets(self):

        # Disable the new buttons/line edit/checkbox
        self.set_speed_line_edit.setEnabled(False)
        self.set_speed_button.setEnabled(False)
        self.set_angle_button.setEnabled(False)
        self.set_Temperature_line_edit.setEnabled(False)
        self.set_Temperature_button.setEnabled(False)

        # Enable speed stages

        self.set_speed_1_line_edit.setEnabled(False)
        self.set_speed_2_line_edit.setEnabled(False)
        self.set_speed_3_line_edit.setEnabled(False)
        self.set_time_1_line_edit.setEnabled(False)
        self.set_time_2_line_edit.setEnabled(False)
        self.set_time_3_line_edit.setEnabled(False)
        self.stage_1_checkbox.setEnabled(False)
        self.stage_2_checkbox.setEnabled(False)
        self.stage_3_checkbox.setEnabled(False)
        self.begin_stages_button.setEnabled(False)

        # Enable angle stages

        self.set_angle_value_1_line_edit.setEnabled(False)
        self.set_angle_value_2_line_edit.setEnabled(False)
        self.set_angle_value_3_line_edit.setEnabled(False)
        self.set_angle_time_1_line_edit.setEnabled(False)
        self.set_angle_time_2_line_edit.setEnabled(False)
        self.set_angle_time_3_line_edit.setEnabled(False)
        self.angle_stage_1_checkbox.setEnabled(False)
        self.angle_stage_2_checkbox.setEnabled(False)
        self.angle_stage_3_checkbox.setEnabled(False)

        self.set_id_line_edit.setEnabled(False)
        self.set_angle_button.setEnabled(False)
        self.set_angle_line_edit.setEnabled(False)
        self.servo_mode_radio_button.setEnabled(False)
        self.motor_mode_radio_button.setEnabled(False)

    def enable_widgets(self):

        # Activate the new buttons/lineedit/checkbox 
        self.set_speed_line_edit.setEnabled(True)
        self.set_speed_button.setEnabled(True)
        self.set_angle_button.setEnabled(True)
        self.set_Temperature_line_edit.setEnabled(True)
        self.set_Temperature_button.setEnabled(True)

        # Enable speed stages

        self.set_speed_1_line_edit.setEnabled(True)
        self.set_speed_2_line_edit.setEnabled(True)
        self.set_speed_3_line_edit.setEnabled(True)
        self.set_time_1_line_edit.setEnabled(True)
        self.set_time_2_line_edit.setEnabled(True)
        self.set_time_3_line_edit.setEnabled(True)
        self.stage_1_checkbox.setEnabled(True)
        self.stage_2_checkbox.setEnabled(True)
        self.stage_3_checkbox.setEnabled(True)
        self.begin_stages_button.setEnabled(True)

        # Enable angle stages

        self.set_angle_value_1_line_edit.setEnabled(True)
        self.set_angle_value_2_line_edit.setEnabled(True)
        self.set_angle_value_3_line_edit.setEnabled(True)
        self.set_angle_time_1_line_edit.setEnabled(True)
        self.set_angle_time_2_line_edit.setEnabled(True)
        self.set_angle_time_3_line_edit.setEnabled(True)
        self.angle_stage_1_checkbox.setEnabled(True)
        self.angle_stage_2_checkbox.setEnabled(True)
        self.angle_stage_3_checkbox.setEnabled(True)

        self.set_id_line_edit.setEnabled(True)
        self.set_angle_line_edit.setEnabled(True)
        self.servo_mode_radio_button.setEnabled(True)
        self.motor_mode_radio_button.setEnabled(True)

    def clear_servo(self):
        self.active_servo = None

    @catch_disconnection
    def set_servo_id(self, id_):
        if not id_.isdigit():
            return

        self.active_servo = LX16A(int(id_))
        self.active_servo.enable_torque()
        if self.active_servo.is_motor_mode():
            self.motor_mode_radio_button.setChecked(True)
        else:
            self.servo_mode_radio_button.setChecked(True)

    @catch_disconnection
    def scan_for_servos(self, port):
        self.setCursor(Qt.CursorShape.WaitCursor)

        LX16A.initialize(port)

        self.id_selection_box.clear()

        for i in range(0, 254):
            try:
                servo = LX16A(i)
                self.id_selection_box.addItem(str(i))
            except:
                pass

        self.setCursor(Qt.CursorShape.ArrowCursor)

    @catch_disconnection
    def scan_for_ports(self):
        ports = serial.tools.list_ports.comports()
        for port in ports:
            self.port_selection_box.addItem(port.device)

    @catch_disconnection
    def update_readouts(self):
        if self.active_servo is None:
            return

        try:
            self.physical_position_readout.setText(
                f"{self.active_servo.get_physical_angle():0.2f}°"
            )
            self.temperature_readout.setText(f"{self.active_servo.get_temp()} °C")
            self.voltage_readout.setText(f"{self.active_servo.get_vin() / 1000} V")
        except (ServoTimeoutError, ServoChecksumError):
            pass

    @catch_disconnection
    def id_updated(self):
        new_id = self.set_id_line_edit.text()

        try:
            servo = LX16A(int(new_id))
        except ServoTimeoutError:
            self.active_servo.set_id(int(new_id))
            self.id_selection_box.item(self.id_selection_box.currentRow()).setText(
                new_id
            )

            return

        QMessageBox.warning(None, "Error", "ID already taken")
        
    @catch_disconnection
    def position_button_updated(self):
        
        pos = self.set_angle_line_edit.text()

        if (int(pos) < 0) or (int(pos) > 90):
            QMessageBox.warning(
                None,
                "Error",
                "Angle range is from 0° to 90°",
            )
            return
        if int(pos) == 0:
            self.active_servo.move(90)
        else:
            self.active_servo.move(float(pos)*2.13333333)      


    # @catch_disconnection
    # def temp_limit_updated(self, text):
    #     if (
    #         QIntValidator(50, 100, self).validate(text, 0)
    #         != QIntValidator.State.Acceptable
    #     ):
    #         return

    #     self.active_servo.set_temp_limit(int(text))

    @catch_disconnection
    def servo_mode_radio_button_toggled(self, checked):
        if checked:
            self.active_servo.servo_mode()
            self.set_angle_line_edit.setEnabled(True)
        else:
            self.set_angle_line_edit.setEnabled(False)


    @catch_disconnection
    def motor_mode_radio_button_toggled(self, checked):
        if checked:
            self.set_angle_line_edit.setEnabled(False)
        else:
            self.active_servo.servo_mode()
            self.set_angle_line_edit.setEnabled(True)

    def increaseAngle(self,actualAngle,speed,step,index):
        if int(speed[index]) > actualAngle:
            while actualAngle < int(speed[index]):       
                self.active_servo.motor_mode(int(actualAngle))           
                time.sleep(1)
                actualAngle += step
        else:
            while actualAngle > int(speed[index]):       
                self.active_servo.motor_mode(int(actualAngle))           
                time.sleep(1)
                actualAngle -= step

    def increaseSpeed(self,actualSpeed,speed,step,index):
        if int(speed[index]) > actualSpeed:
            while actualSpeed < int(speed[index]):       
                self.active_servo.motor_mode(int(actualSpeed))           
                time.sleep(1)
                actualSpeed += step
        else:
            while actualSpeed > int(speed[index]):       
                self.active_servo.motor_mode(int(actualSpeed))           
                time.sleep(1)
                actualSpeed -= step


    def verify_Temperature(self):
        try:
            self.target_temperature = int(self.set_Temperature_line_edit.text())
            if self.target_temperature > 0:
                self.timer.start(250)  # Check temperature every 250 milliseconds
        except ValueError:
            QMessageBox.warning(
                None,
                "Error",
                "Please enter a valid integer for temperature.",
            )
            return

    def update_temp(self):
        current_temp = self.active_servo.get_temp()
        if current_temp >= self.target_temperature:
            QMessageBox.warning(
                None,
                "Warning",
                f"Temperature {current_temp} exceeds {self.target_temperature}, stopping motor.",
            )
            return

    def stop_motor(self):
        stop = 0
        self.active_servo.move(stop)
        self.active_servo.motor_mode(stop)
        self.timer.stop()


    @catch_disconnection
    def stagesRunAngle(self):

        pos0 = 0
        varNull = ''

        pos1 = self.set_angle_value_1_line_edit.text()
        pos2 = self.set_angle_value_2_line_edit.text()
        pos3 = self.set_angle_value_3_line_edit.text()

        time1 = self.set_angle_time_1_line_edit.text()
        time2 = self.set_angle_time_2_line_edit.text()
        time3 = self.set_angle_time_3_line_edit.text()

        isLineal1 = self.angle_stage_1_checkbox.isChecked()
        isLineal2 = self.angle_stage_2_checkbox.isChecked()
        isLineal3 = self.angle_stage_3_checkbox.isChecked()

        pos = [pos1,pos2,pos3]
        times = [time1,time2,time3]
        lineal = [isLineal1,isLineal2,isLineal3]
        
        if (pos[0]!=varNull and times[0] == varNull) or (pos[1]!=varNull and times[1] == varNull) or (pos[2]!=varNull and times[2] == varNull):
            QMessageBox.warning(
                None,
                "Error",
                "If you select an angle value, select a time value too",
            )
            return
        
        try:
            for i in range(len(pos)):
                int(pos[i])
                float(times[i])
        except ValueError:
            QMessageBox.warning(
                None,
                "Error",
                f"Some fields were fulled with string characters maybe {pos[i]} or {times[i]}",
            )
            return
        else:
            for i in range(len(pos)):
                if float(times[i]) == 0:
                    pass
                else:
                    if lineal[i]:
                        if i == 0:
                            step = int(pos[i])/(float(times[i])*60)
                            actualAngle = pos0
                            self.increaseAngle(actualAngle,pos,step,i)
                        else:
                            step = abs(int(pos[i])-int(pos[i-1]))/(float(times[i])*60)
                            actualAngle = int(pos[i-1])
                            self.increaseAngle(actualAngle,pos,step,i)
                    else:
                        actualAngle = int(pos[i])
                        self.active_servo.move(actualAngle)
                        time.sleep(float(times[i])*60)
                        
        self.active_servo.move(pos0)

    @catch_disconnection
    def stagesRun(self):

        pos0 = 0
        varNull = ''

        pos1 = self.set_speed_1_line_edit.text()
        pos2 = self.set_speed_2_line_edit.text()
        pos3 = self.set_speed_3_line_edit.text()

        time1 = self.set_time_1_line_edit.text()
        time2 = self.set_time_2_line_edit.text()
        time3 = self.set_time_3_line_edit.text()

        isLineal1 = self.stage_1_checkbox.isChecked()
        isLineal2 = self.stage_2_checkbox.isChecked()
        isLineal3 = self.stage_3_checkbox.isChecked()

        pos = [pos1,pos2,pos3]
        times = [time1,time2,time3]
        lineal = [isLineal1,isLineal2,isLineal3]
        
        if (pos[0]!=varNull and times[0] == varNull) or (pos[1]!=varNull and times[1] == varNull) or (pos[2]!=varNull and times[2] == varNull):
            QMessageBox.warning(
                None,
                "Error",
                "If you select a speed value, select a time value too",
            )
            return
        
        try:
            for i in range(len(pos)):
                int(pos[i])
                float(times[i])
        except ValueError:
            QMessageBox.warning(
                None,
                "Error",
                f"Some fields were fulled with string characters maybe {pos[i]} or {times[i]}",
            )
            return
        else:
            for i in range(len(pos)):
                if float(times[i]) == 0:
                    pass
                else:
                    if lineal[i]:
                        if i == 0:
                            step = int(pos[i])/(float(times[i])*60)
                            actualSpeed = pos0
                            self.increaseSpeed(actualSpeed,pos,step,i)
                        else:
                            step = abs(int(pos[i])-int(pos[i-1]))/(float(times[i])*60)
                            actualSpeed = int(pos[i-1])
                            self.increaseSpeed(actualSpeed,pos,step,i)
                    else:
                        actualSpeed = int(pos[i])
                        self.active_servo.motor_mode(actualSpeed)
                        time.sleep(float(times[i])*60)
                        
        self.active_servo.motor_mode(pos0)

    @catch_disconnection
    def motor_speed_button_updated(self):

        pos = self.set_speed_line_edit.text()
        t = self.set_time_line_edit.text()

        if float(self.voltage_readout.text()[:-2]) < 5:
            QMessageBox.warning(
                None,
                "Error",
                "The voltage going through the servo is too low. Is your battery powered on?",
            )

            return
        self.active_servo.motor_mode(int(pos))
        time.sleep(float(t)*60)
        self.active_servo.motor_mode(0)

    @catch_disconnection
    def port_refresh_button_clicked(self, value):
        self.id_selection_box_refresh_button.setEnabled(False)
        self.disable_widgets()
        self.port_selection_box.clear()
        self.id_selection_box.clear()
        self.scan_for_ports()

    @catch_disconnection
    def id_refresh_button_clicked(self, value):
        self.disable_widgets()
        self.id_selection_box.clear()
        self.scan_for_servos(self.port_selection_box.currentText())

    @catch_disconnection
    def port_selection_box_changed(self, text):
        if text == "":
            return

        self.id_selection_box_refresh_button.setEnabled(True)
        self.disable_widgets()
        self.id_selection_box.clear()
        self.clear_servo()
        self.scan_for_servos(text)

    @catch_disconnection
    def id_selection_box_changed(self, text):
        if text == "":
            return

        self.enable_widgets()
        self.set_servo_id(text)


def main():
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    app.exec()


if __name__ == "__main__":
    main()